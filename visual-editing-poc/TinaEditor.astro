---

import {sharedData} from "../lib/store"
// TinaEditor.astro
export interface Props {
  query: string;
  variables: Record<string, any>;
  data: Record<string, any>;
}

---
<div id="tina-editor-root" data-props={JSON.stringify(Astro.props)}></div>

<script >
import { sharedData } from "../lib/store"

export interface Props {
  query: string;
  variables: Record<string, any>;
  data: Record<string, any>;
}

	function hashFromQuery(input: string) {
		let hash = 0
		for (let i = 0; i < input.length; i++) {
			const char = input.charCodeAt(i)
			hash = ((hash << 5) - hash + char) & 0xffffffff // Apply bitwise AND to ensure non-negative value
		}
		const nonNegativeHash = Math.abs(hash)
		const alphanumericHash = nonNegativeHash.toString(36)
		return alphanumericHash
	}

  function createTinaEditor(props: Props) {
    let isInTinaIframe = false;

    const id = hashFromQuery(JSON.stringify({
      query: props.query,
      variables: props.variables,
    }));

    function setQuickEditEnabled(value: boolean) {
      if (value) {
        addQuickEditStyles();
        document.body.classList.add('__tina-quick-editing-enabled');
        document.addEventListener('click', mouseDownHandler, true);
      } else {
        removeQuickEditStyles();
        document.body.classList.remove('__tina-quick-editing-enabled');
        document.removeEventListener('click', mouseDownHandler, true);
      }
    }

    function addQuickEditStyles() {
      const style = document.createElement('style');
      style.type = 'text/css';
      style.textContent = `
        [data-tina-field] {
          outline: 2px dashed rgba(34,150,254,0.5);
          transition: box-shadow ease-out 150ms;
        }
        [data-tina-field]:hover {
          box-shadow: inset 100vi 100vh rgba(34,150,254,0.3);
          outline: 2px solid rgba(34,150,254,1);
          cursor: pointer;
        }
        [data-tina-field-overlay] {
          outline: 2px dashed rgba(34,150,254,0.5);
          position: relative;
        }
        [data-tina-field-overlay]:hover {
          cursor: pointer;
          outline: 2px solid rgba(34,150,254,1);
        }
        [data-tina-field-overlay]::after {
          content: '';
          position: absolute;
          inset: 0;
          z-index: 20;
          transition: opacity ease-out 150ms;
          background-color: rgba(34,150,254,0.3);
          opacity: 0;
        }
        [data-tina-field-overlay]:hover::after {
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
    }

    function removeQuickEditStyles() {
      const style = document.querySelector('style[data-tina-styles]');
      if (style) {
        style.remove();
      }
    }

    function mouseDownHandler(e: any) {
      const tinaField = e.target?.closest('[data-tina-field], [data-tina-field-overlay]');
      if (tinaField) {
        e.preventDefault();
        e.stopPropagation();
        const fieldName = tinaField.getAttribute('data-tina-field') || tinaField.getAttribute('data-tina-field-overlay');
        if (fieldName) {
          console.log(`Field selected: ${fieldName}`);
          if (isInTinaIframe) {
            parent.postMessage(
              { type: 'field:selected', fieldName: fieldName },
              window.location.origin
            );
          }
        }
      }
    }

    function init() {
			console.log('init with props and id', props, id)
      parent.postMessage({ type: 'open', ...props, id }, window.location.origin);
      
      window.addEventListener('message', (event) => {
        if (event.data.type === 'quickEditEnabled') {
          setQuickEditEnabled(event.data.value);
        }
        if (event.data.id === id && event.data.type === 'updateData') {
					console.log('updating data', event.data.data)
					sharedData.set(event.data.data);
					// console.log({event})
          isInTinaIframe = true;
          const anyTinaField = document.querySelector('[data-tina-field]');
          if (anyTinaField) {
            parent.postMessage(
              { type: 'quick-edit', value: true },
              window.location.origin
            );
          } else {
            parent.postMessage(
              { type: 'quick-edit', value: false },
              window.location.origin
            );
          }
        }
      });

      // Initialize with quick edit enabled
      setQuickEditEnabled(true);

      return () => {
        parent.postMessage({ type: 'close', id }, window.location.origin);
      };
    }

    return {
      init,
    };
  }

	const props = document.getElementById('tina-editor-root')?.getAttribute('data-props');

	console.log({props})

  // Initialize the Tina editor when the script runs
  const tinaEditor = createTinaEditor(JSON.parse(props));
  const cleanup = tinaEditor.init();

  // Clean up when the page is unloaded
  window.addEventListener('unload', cleanup);
</script>

